using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography.X509Certificates;

class Program
{
    static double[] CreateArray(int list_length)
    {
        double[] list = new double[list_length];
        for (int i = 0; i < list_length; i++)
        {
            Console.Write("[" + i + "] ");
            list[i] = Convert.ToDouble(Console.ReadLine());
        }
        Console.WriteLine();

        return list;
    }
    static void PrintArray(double[] list)
    {
        for (int i = 0; i < list.Length; i++)
        {
            Console.Write(list[i] + " ");
        }
        Console.WriteLine();
    }
    static double[,] CreateMatrix(int length_i, int length_j)
    {
        double[,] matrix = new double[length_i, length_j];
        for (int i = 0; i < length_i; i++)
        {
            for (int j = 0; j < length_j; j++)
            {
                Console.Write("[" + i + "," + j + "] ");
               matrix[i, j] = Convert.ToDouble(Console.ReadLine());

            }
            Console.WriteLine();
        }
        Console.WriteLine();

        return matrix;
    }
    static double[] Remove_Element(double[] list, int index)
    {
        double[] new_list = new double[list.Length - 1];
        for (int i = 0; i < index; i++)
        {
            new_list[i] = list[i];
        }
        for (int i = index; i < new_list.Length; i++)
        {
            new_list[i] = list[i + 1];
        }
        return new_list;
    }
    static void PrintMatrix(double[,] matrix)
    {
        for (int i = 0; i < matrix.GetLength(0); i++)
        {
            for (int j = 0; j < matrix.GetLength(1); j++)
            {
                Console.Write(matrix[i, j] + " ");
            }
            Console.WriteLine();
        }
        Console.WriteLine();
    }
    static int max_element_index(double[] list)
    {
        int max_element_index = 0;
        double max_element = list[0];
        for (int i = 0; i < list.Length; i++)
        {
            if (list[i] > max_element)
            {
                max_element = list[i];
                max_element_index = i;
            }
        }
        return max_element_index;
    }
    static int matrix_max_number_j(double[,] matrix)
    {
        int max_number_index_j = 0;
        double max_number = -100000000;
        for (int i = 0; i < matrix.GetLength(0); i++)
        {
            for (int j = 0; j < matrix.GetLength(1); j++)
            {
                if (matrix[i,j] > max_number)
                {
                    max_number_index_j = j;
                    max_number = matrix[i,j];
                }
            }
        }
        return max_number_index_j;
    }
    static double[] Union_list(double[] list1, double[] list2)
    {
        return list1.Concat(list2).ToArray();
    }

    static void SwapColumns(double[,] matrix1, double[,] matrix2, int column1, int column2)
    {
        for (int i = 0; i < matrix1.GetLength(0); i++)
        {
            double temp = matrix1[i, column1];
            matrix1[i, column1] = matrix2[i, column2];
            matrix2[i, column2] = temp;
        }
    }
    static void SortMainDiagonal(double[,] matrix)
    {
        int size = matrix.GetLength(0);

        for (int i = 0; i < size - 1; i++)
        {
            for (int j = i + 1; j < size; j++)
            {
                if (matrix[i, i] > matrix[j, j])
                {
                    double temp = matrix[i, i];
                    matrix[i, i] = matrix[j, j];
                    matrix[j, j] = temp;
                }
            }
        }
    }
    static void SwapColumnWithMainDiagonal(double[,] matrix, int columnIndex)
    {
        int size = matrix.GetLength(0);
        for (int i = 0; i < size; i++)
        {
            if (i != columnIndex)
            {
                double temp = matrix[i, i];
                matrix[i, i] = matrix[i, columnIndex];
                matrix[i, columnIndex] = temp;
            }
        }
    }
    static void Main()
    {
        #region 6
        double[] A = CreateArray(7);
        double[] B = CreateArray(8);
        double[] new_list1 = Remove_Element(A, max_element_index(A));
        double[] new_list2 = Remove_Element(B, max_element_index(B));
        A = Union_list(new_list1, new_list2);
        PrintArray(A);
        Console.ReadKey();
        #endregion
        #region 12
        Console.WriteLine("Введите количество строк");
        int rows = Convert.ToInt32(Console.ReadLine());
        Console.WriteLine("Введите количество столбцов");
        int columns = Convert.ToInt32(Console.ReadLine());
        double[,] matrix1 = CreateMatrix(rows, columns);
        double[,] matrix2 = CreateMatrix(rows, columns);
        SwapColumns(matrix1, matrix2, matrix_max_number_j(matrix1), matrix_max_number_j(matrix2));
        PrintMatrix(matrix1);
        PrintMatrix(matrix2);
        Console.ReadKey();
        #endregion
        #region 18
        Console.WriteLine("Введите количество строк и столбцов в первой матрице");
        int size = Convert.ToInt32(Console.ReadLine());
        double[,] mtrx1 = CreateMatrix(size, size);
        Console.WriteLine("Введите количество строк и столбцов во второй матрице");
        int size2 = Convert.ToInt32(Console.ReadLine());
        double[,] mtrx2 = CreateMatrix(size2, size2);
        SortMainDiagonal(mtrx1);
        SortMainDiagonal(mtrx2);
        PrintMatrix(mtrx1);
        PrintMatrix(mtrx2);
        Console.ReadKey();
        #endregion
        #region 24
        Console.WriteLine("Введите количество строк и столбцов в первой матрице");
        int rows_cols1 = Convert.ToInt32(Console.ReadLine());
        double[,] matrx1 = CreateMatrix(rows_cols1,rows_cols1);
        Console.WriteLine("Введите количество строк и столбцов во второй матрице");
        int rows_cols2 = Convert.ToInt32(Console.ReadLine());
        double[,] matrx2 = CreateMatrix(rows_cols2,rows_cols2);
        SwapColumnWithMainDiagonal(matrx1, matrix_max_number_j(matrx1));
        SwapColumnWithMainDiagonal(matrx2, matrix_max_number_j(matrx2));
        PrintMatrix(matrx1);
        PrintMatrix(matrx2);
        Console.ReadKey();
        #endregion
    }
}